HyperText Transfer Protocol (HTTP) - 
 *  Most internet communications are made with web requests through the HTTP protocol. 
 *  HTTP is an application-level protocol used to access the World Wide Web resources.
 *  HTTP communication consists of a client and a server, where the client requests the server for a resource. 
 *  The server processes the requests and returns the requested resource. 
 *  The default port for HTTP communication is port 80, though this can be changed to any other port, depending on the web server configuration. 
 
URL(Uniform Resource Location) - 
 *  Resources over HTTP are accessed via a URL, which offers many more specifications than simply specifying a website we want to visit.
 
 *  Components-
                                        https://user:password@github.com:80 /Mithlesh435/dashboard.php?login=true#status
                                       |_______||___________| |_________||_||_________________________||_________||_____|  
                         Scheme ___________|          |            |      |              |                  |        |____________Fragment
                                             User_____|            |      |              |                  |
                                                         Host______|      |              |_______Path       |___Query string 
                                                                        Port
                              
        [  Scheme ] | This is used to identify the protocol being accessed by the client, and ends with a colon and a double slash (://).   |
        
        [   User  ] | This is an optional component that contains the credentials (separated by a colon :) used to authenticate to the host,|
                    | and is separated from the host with an at sign (@).                                                                   |
                    
        [   Host  ] | The host signifies the resource location. This can be a hostname or an IP address.                                    |
        
        [   Port  ] | The Port is separated from the Host by a colon (:). If no port is specified,http schemes default to port 80 and https |
                    | default to port 443.                                                                                                  |
                    
        [   Path  ] | This points to the resource being accessed, which can be a file or a folder. If there is no path specified, the       |
                    | server returns the default index (e.g. index.html).                                                                   |
                    
        [ Query String ] | The query string starts with a question mark (?), and consists of a parameter (e.g. login) and a value           |
                         | (e.g. true). Multiple parameters can be separated by an ampersand (&).                                           |
          
        [ Fragment ] | Fragments are processed by the browsers on the client-side to locate sections within the primary resource (e.g. a    |
                     | header or section on the page).                                                                                      |
                     
                     
Hypertext Transfer Protocol Secure (HTTPS) - 
  * We discussed how HTTP requests are sent and processed. However, one of the significant drawbacks of HTTP is that all data is transferred 
    in clear-text. This means that anyone between the source and destination can perform a Man-in-the-middle (MiTM) attack to view the 
    transferred data.
  * To counter this issue, the HTTPS (HTTP Secure) protocol was created, in which all communications are transferred in an encrypted format, 
    so even if a third party does intercept the request, they would not be able to extract the data out of it. 
    
  
HTTPS Flow - 
               
[ User ] -----_------>[ Browser { http://github.com } ]                                          [ Server ]
                                        |                                                             |
                                        |                                                             |
                                        |---------------[ HTTP request to github.com:80]------------->|
                                        |                       GET / HTTP / 1.1                      |
                                        |                                                             |
                                        |<-----------[ Redirection to HTTPS "github.com" ]------------|
                                        |             HTTP / 1.1 / 301 / Moved Permanently            |
                                        |                                                             |
                                        |---------------[ connect to github.com:443 ]---------------->|
                                        |                       Client hello                          |
                                        |                                                             |
                                        |<----------------------[ Server hello ]----------------------|
                                        |                    Server key exchange                      |
                                        |                                                             |
                                        |-------------------[ Client Key exchange ]------------------>|
                                        |                     Encrypted Handshake                     |
                                        |                                                             |
                                        |<------------------[ Encrypted Handshake ]-------------------|
                                        |                           Finish                            |
                                        |                                                             |
                                        |<<--------------[ Encrypted HTTP Connection ]-------------->>|
                                     
cURL(tool)for HTTPS - 
 * cURL should automatically handle all HTTPS communication standards and perform a secure handshake and then encrypt and decrypt data automatically. 
 
HTTP Requests and Responses - 
 * HTTP communications mainly consist of an HTTP request and an HTTP response. 
 * An HTTP request is made by the client (e.g. cURL/browser), and is processed by the server (e.g. web server). 
 * The requests contain all of the details we require from the server, including the resource (e.g. URL, path, parameters), 
   any request data, headers or options we specify, and many other options we will discuss throughout this module.

HTTP Request - 


                                                          [ Path ]
                         [ HTTP Method ]-----------|          |            |--------------[ HTTP version ]
                                                   |          |            |
                                                 |---||---------------||--------|
                                               |  GET /users/loqin.html HTTP/1.1                              |
                                               |  Host: inlanefreight.com                                     |
                                               |  user-agent: Mozilla/S.o lUduntu: Linux x80 64: F1retox/ /8. |
                                               |  ACCept: text/html, application/xhtml+xml,application/xml    |
                                               |  Accept-Lanquage: en-Us,en;0=0.3                             |
                   [ HTTP Headers ]----------- |  ACcept-Encoding:gzip, deflate                               |--------------[ Header Values ]
                                               |  Content-Type: text/ntml; charset=UTF-8                      |    
                                               |  Connection: Close                                           |
                                               |  Cookie: PHPSESSID=(4ggt4jull9obt7aupa5508vbf                | 
                                               |  Upgrade-Insecure-kequests: 1                                |
                                               |  Cache-control: max-age=0                                    |

HTTP Response - 
 * Once the server processes our request, it sends its response. 
 The following is an example HTTP response:
